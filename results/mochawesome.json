{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-27T09:26:34.580Z",
    "end": "2023-10-27T09:26:47.185Z",
    "duration": 12605,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "095984e0-6e58-460c-8185-6fabbca0b075",
      "title": "",
      "fullFile": "cypress\\tests\\authen\\LoginTest.js",
      "file": "cypress\\tests\\authen\\LoginTest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "87cc43e2-2a95-4f9d-aba0-b1d716058b29",
          "title": "Login Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to login with correct cred",
              "fullTitle": "Login Test should be able to login with correct cred",
              "timedOut": null,
              "duration": 7041,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {\n  username,\n  password\n} = LOGIN_CRED;\nlogin(username, password);\nheaderComp.getLoggedUsername().should('be.visible');\nheaderComp.getLoggedUsername().should('contain.text', `Welcome ${LOGIN_CRED.username}`);",
              "err": {},
              "uuid": "cef80d30-a56b-4ef0-b650-103a90492218",
              "parentUUID": "87cc43e2-2a95-4f9d-aba0-b1d716058b29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to see blank username and password",
              "fullTitle": "Login Test should be able to see blank username and password",
              "timedOut": null,
              "duration": 870,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "headerComp.getLoginLink().click();\nloginComp.getLoginBtn().click();\ncy.on('window:alert', message => {\n  expect(message).to.contains('Please fill out Username and Password');\n});",
              "err": {},
              "uuid": "0b786d8b-23bf-4c6b-ad89-06532551e0e0",
              "parentUUID": "87cc43e2-2a95-4f9d-aba0-b1d716058b29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to see wrong username",
              "fullTitle": "Login Test should be able to see wrong username",
              "timedOut": null,
              "duration": 1810,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {\n  username,\n  password\n} = LOGIN_CRED;\nlogin(username + \"_WRONG\", password);\ncy.on('window:alert', message => {\n  expect(message).to.contains('User does not exist');\n});",
              "err": {},
              "uuid": "42e620b3-fb47-420d-8662-4f4f6caff46f",
              "parentUUID": "87cc43e2-2a95-4f9d-aba0-b1d716058b29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to see wrong password",
              "fullTitle": "Login Test should be able to see wrong password",
              "timedOut": null,
              "duration": 2283,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const {\n  username,\n  password\n} = LOGIN_CRED;\nlogin(username, password + \"_WRONG\");\ncy.on('window:alert', message => {\n  expect(message).to.contains('Wrong password');\n});",
              "err": {},
              "uuid": "a3647d42-1c48-4870-9578-f3235137b77e",
              "parentUUID": "87cc43e2-2a95-4f9d-aba0-b1d716058b29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cef80d30-a56b-4ef0-b650-103a90492218",
            "0b786d8b-23bf-4c6b-ad89-06532551e0e0",
            "42e620b3-fb47-420d-8662-4f4f6caff46f",
            "a3647d42-1c48-4870-9578-f3235137b77e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12004,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}